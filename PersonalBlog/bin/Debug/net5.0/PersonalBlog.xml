<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PersonalBlog</name>
    </assembly>
    <members>
        <member name="M:PersonalBlog.src.controllers.AuthenticationController.AuthenticateAsync(PersonalBlog.src.dtos.AuthenticateDTO)">
             <summary>
             Get Authorization
             </summary>
             <param name="authenticationDTO"> AuthenticateDTO</param>
             <returns>ActionResult</returns>
             <remarks>
             Exemplo de requisição:
            
                 POST /api/Authentication
                 {
                    "email": "rodrigo@domain.com",
                    "senha": "134652"
                 }
            
             </remarks>
             <response code="201">Return the created user</response>
             <response code="400">Requisition error</response>
             <response code="401">Invalid e-mail or password</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.GetPostByIdAsync(System.Int32)">
            <summary>
            Get posts by as async.
            </summary>
            <returns> ActionResult </returns>
            <response code = "200">Post object</response>
            <response code = "204">Post empty</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.GetAllPostsAsync">
            <summary>
            Get all posts
            </summary>
            <returns>ActionResult </returns>
            <response code="200">Posts list</response>
            <response code="204">Post empty list</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.GetPostBySearchAsync(System.String,System.String,System.String)">
            <summary>
            Get post list by search
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Return posts list</response>
            <response code="204">Posts not found for this search</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.NewPostAsync(PersonalBlog.src.dtos.NewPostDTO)">
            <summary>
            Create a new post
            </summary>
            <returns>ActionResult</returns>
            <response code="201">Retorna created post</response>
            <response code="400">Request error</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.UpdatePostAsync(PersonalBlog.src.dtos.UpdatePostDTO)">
            <summary>
            Update post
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the updated post</response>
            <response code="400">Request error</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.PostController.DeletePostAsync(System.Int32)">
            <summary>
            Delete the post by id.
            </summary>
            <returns>ActionResult</returns>
            <response code="204">Post deleted</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.PegarTodosTemasAsync">
            <summary>
            Get all themes
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Themes list</response>
            <response code="204">List empty</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.GetThemeByIdAsync(System.Int32)">
            <summary>
            Get theme by Id
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the theme</response>
            <response code="404">Theme does not exist</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.GetThemeByDescriptionAsync(System.String)">
            <summary>
            Get theme by Description
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the themes</response>
            <response code="204">List themes empty</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.NewThemeAsync(PersonalBlog.src.dtos.NewThemeDTO)">
             <summary>
            Create a new theme
             </summary>
             <returns>ActionResult</returns>
             <response code="201">Return theme created</response>
             <response code="400">Request error</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.UpdateThemeAsync(PersonalBlog.src.dtos.UpdateThemeDTO)">
            <summary>
            Update the theme
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the updated theme</response>
            <response code="400">Request error</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.ThemeController.DeleteThemeAsync(System.Int32)">
            <summary>
            Delete the theme by Id
            </summary>
            <returns>ActionResult</returns>
            <response code="204">Theme deleted</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.GetUserByIdAsync(System.Int32)">
            <summary>
            Get user by Id
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the user</response>
            <response code="404">User does not exist</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.GetUsersByNameAsync(System.String)">
            <summary>
            Get user by name
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the user</response>
            <response code="404">User does not exist</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.GetUserByEmailAsync(System.String)">
            <summary>
            Get user by email
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Returns the user</response>
            <response code="404">User does not exist</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.NewUserAsync(PersonalBlog.src.dtos.NewUserDTO)">
            <summary>
            Create a new user
            </summary>
            <returns>ActionResult</returns>
            <response code="201">Returns the created user</response>
            <response code="400">Request error</response>
            <response code="401">Email already registered</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.UpdateUserAsync(PersonalBlog.src.dtos.UpdateUserDTO)">
            <summary>
            Update the user
            </summary>
            <returns>ActionResult</returns>
            <response code="200">Return user updated</response>
            <response code="400">Request error</response>
        </member>
        <member name="M:PersonalBlog.src.controllers.UserController.DeleteUserAsync(System.Int32)">
            <summary>
            Delete the user by the Id
            </summary>
            <returns>ActionResult</returns>
            <response code="204">User deleted</response>
        </member>
        <member name="T:PersonalBlog.src.dtos.NewPostDTO">
            <summary>
            <para> DTO for create a new post </para>
            <para>Version: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.dtos.UpdatePostDTO">
            <summary>
            <para> DTO for update a new post </para>
            <para>Version: 1.0</para>
            <para>Date: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.dtos.NewThemeDTO">
            <summary>
            <para> DTO for create a new theme </para>
            <para>Version: 1.0</para>
            <para>Date: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.dtos.UpdateThemeDTO">
            <summary>
            <para> DTO for update the theme </para>
            <para>Version: 1.0</para>
            <para>Date: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.dtos.NewUserDTO">
            <summary>
            <para> DTO for create a new user </para>
            <para>Version: 1.0</para>
            <para>Date: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.dtos.UpdateUserDTO">
            <summary>
            <para> DTO for update a new user </para>
            <para>Version: 1.0</para>
            <para>Date: 29/04/2022</para>
            </summary>
        </member>
        <member name="T:PersonalBlog.src.repositories.IUser">
            <summary>
            <para>  </para>
            <para>Criado por: Nickole Bueno</para>
            <para>Versão: 1.0</para>
            <para>Data: 29/04/2022</para>
            </summary>
        </member>
    </members>
</doc>
